import { Feed } from "feed";
import OpenAI from "openai";
import transverter from "@/utils/transverter";
import { generateGuid, replaceWordsInText } from "@/utils/utils";

export async function generateData(
    prompt: string,
    apiKey: string,
    baseUrl: string,
    model: string,
    callback: (result: string) => void,
    retryCount: number = 0
) {
    const openai = new OpenAI({
        apiKey: apiKey,
        baseURL: baseUrl,
        dangerouslyAllowBrowser: true,
    });
    let content = "";
    console.log(apiKey, baseUrl);
    try {
        const stream = await openai.chat.completions.create({
            model: model,
            messages: [{ role: "user", content: prompt }],
            stream: true,
        });
        for await (const part of stream) {
            content += part.choices[0]?.delta?.content || "";
            callback(content);
        }
        return content;
    } catch (e) {
        console.error(e);
        if (retryCount >= 6) {
            throw new Error("Exceeded maximum retry attempts");
        }
        console.log("Retrying in 10 seconds...");
        await new Promise((resolve) => setTimeout(resolve, 10000));
        return generateData(
            prompt,
            apiKey,
            baseUrl,
            model,
            callback,
            retryCount + 1
        );
    }
}

export const generateFeed = (
    topics: string,
    content: string,
    footer: string,
    replaceWords: string,
    toT: boolean,
) => {
    const titles = topics
        .split("\n")
        .filter((item) => item.trim() !== "")
        .map((item) => item.replace(/^\d+\.\s*/, "").trim());
    const posts = content
        .split("\n\n<-- SEOGPT_ARTICLE_END -->\n\n")
        .filter((item) => item.trim() !== "")
        .map((item) => {
            const title = titles.shift();
            const content = replaceWordsInText(
                item
                    .split("\n")
                    .filter((item) => item.trim() !== "")
                    .map((item) => `<p>${item}</p>`)
                    .join("") + footer,
                replaceWords
            );
            const date = new Date();
            if (toT) {
                return {
                    title: transverter({ type: "traditional", text: title }),
                    content: transverter({ type: "traditional", text: content }),
                    date,
                };
            }
            return { title, content, date };
        });
    const feedGuid = generateGuid();
    const feed = new Feed({
        id: `https://seogpt.mirrorange.com/${feedGuid}`,
        link: `https://seogpt.mirrorange.com/${feedGuid}`,
        title: "SEOGPT Export",
        description: "Articles generated by SEOGPT",
        copyright: "All rights reserved 2023, Orange",
    });
    posts.forEach((post) => {
        feed.addItem({
            title: post.title!,
            content: post.content!,
            link: `https://seogpt.mirrorange.com/${generateGuid()}`,
            date: post.date,
        });
    });
    return feed.rss2();
};